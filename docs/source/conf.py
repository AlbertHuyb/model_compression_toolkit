# Configuration file for the Sphinx documentation builder.
#
# This file only contains a selection of the most common options. For a full
# list see the documentation:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#

import os
import sys
sys.path.insert(0, os.path.abspath('../..'))
# sys.setrecursionlimit(1500)


# -- Project information -----------------------------------------------------

project = 'MCT'
copyright = '2021, Sony Semiconductors Israel'
author = 'Sony Semiconductors Israel'

# The full version, including alpha/beta/rc tags
release = '0.0.1'


# # -- General configuration ---------------------------------------------------
#
# # Add any Sphinx extension module names here, as strings. They can be
# # extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# # ones.
# extensions = ['rinoh.frontend.sphinx', 'sphinx.ext.napoleon']
#
# # Add any paths that contain templates here, relative to this directory.
# templates_path = ['_templates']
#
# # List of patterns, relative to source directory, that match files and
# # directories to ignore when looking for source files.
# # This pattern also affects html_static_path and html_extra_path.
# exclude_patterns = []
# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx_autodoc_typehints',
    'sphinx.ext.autosectionlabel',
    'sphinx.ext.ifconfig',
    'sphinx.ext.napoleon',
    'sphinx.ext.autodoc.typehints',
    # 'rinoh.frontend.sphinx'
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['.templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
source_suffix = '.rst'

# The master toctree document.
master_doc = 'user_guide/index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path .
exclude_patterns = []

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# prefix each section label with the name of the document it is in, followed by a colon
autosectionlabel_prefix_document = True

# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.

html_theme = 'classic'
html_theme = 'bizstyle'
html_title = 'MCT Documentation: ver ' + release


html_sidebars = {'**': ['localtoc.html', 'relations.html', 'searchbox.html']}


# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# These paths are either relative to html_static_path
# or fully qualified paths (eg. https://...)
html_css_files = [
    'css/custom.css',
]

autodoc_typehints = "description"
autoclass_content = 'both'

# Display the default value of an argument a method gets as it appears in the source code
# (do not evaluate them like calling __repr__)
autodoc_preserve_defaults = True







# from model_compression_toolkit import DEFAULTCONFIG
# import textwrap
# from model_compression_toolkit.keras.default_framework_info import DEFAULT_KERAS_INFO
#
# var2params = {DEFAULTCONFIG: ('DEFAULTCONFIG', 'model_compression_toolkit.DEFAULTCONFIG', 'Default quantization configuration is:'),
#               DEFAULT_KERAS_INFO: ('DEFAULT_KERAS_INFO', 'model_compression_toolkit.keras.default_framework_info.DEFAULT_KERAS_INFO', 'Default framework info for Keras:')}
#
#
#
# for var, params in var2params.items():
#     default_config_value = textwrap.indent(str(var), '')
#     filename = f'api/api_docs/variables/{params[0]}.rst'
#     if os.path.exists(filename):
#         os.remove(filename)
#
#     with open(filename, "w") as dcv:
#         dcv.write(":orphan:\n\n.. _ug-{name}:\n\n{name}\n{line}\n\n{desc}\n\n.. autodata:: {classpath}\n    :annotation:\n\n\n.. code-block:: py\n\n   {default_config_value}\n\n".format(
#             default_config_value=default_config_value, name=params[0], classpath=params[1], line=len(params[0])*'=', desc=params[2]
#         ))
